name: Build Merl Cinema iOS App (Fixed - Working)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-13  # Use macOS 13 for better compatibility

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter (older version for compatibility)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'  # More stable version
          channel: 'stable'

      # 2.1Ô∏è‚É£ Verify Flutter setup
      - name: Flutter doctor
        run: flutter doctor -v

      # 3Ô∏è‚É£ Install Flutter dependencies
      - name: Flutter pub get
        run: flutter pub get

      # 4Ô∏è‚É£ Setup iOS environment (skip CocoaPods to avoid issues)
      - name: Setup iOS Environment
        run: |
          echo "üîß Setting up iOS environment..."

          # Skip CocoaPods setup to avoid compatibility issues
          export NO_FLUTTER_PACKAGE_ANALYSIS=true

          # Precache iOS artifacts
          flutter precache --ios

          # Clean everything
          flutter clean
          rm -rf ios/Pods ios/Podfile.lock build/ios

          echo "‚úÖ iOS environment ready (CocoaPods skipped)"

      # 5Ô∏è‚É£ Build Flutter iOS (direct approach)
      - name: Build Flutter iOS
        run: |
          echo "üî® Building Flutter iOS app..."

          # Use Flutter's direct iOS build (bypasses CocoaPods)
          flutter build ios --release --no-codesign --verbose

          # Check if build succeeded
          if [ -d "build/ios/iphoneos/Runner.app" ]; then
            echo "‚úÖ Flutter iOS build successful!"
            echo "üì¶ App bundle location: build/ios/iphoneos/Runner.app"
            ls -la build/ios/iphoneos/
          else
            echo "‚ùå Flutter build failed, checking for alternative locations..."
            find build -name "Runner.app" -type d 2>/dev/null || echo "No Runner.app found"
            exit 1
          fi

      # 6Ô∏è‚É£ Create IPA from successful build
      - name: Create IPA
        run: |
          echo "üì¶ Creating IPA from successful build..."

          APP_PATH="build/ios/iphoneos/Runner.app"

          if [ -d "$APP_PATH" ]; then
            echo "‚úÖ Found Runner.app at: $APP_PATH"

            # Create IPA structure
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/

            # Create IPA file with timestamp
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            IPA_NAME="merl-cinema-unsigned-${TIMESTAMP}.ipa"
            zip -r "$IPA_NAME" Payload/

            # Move to artifacts
            mkdir -p artifacts
            mv "$IPA_NAME" artifacts/

            echo "‚úÖ IPA created successfully!"
            echo "üìÅ IPA file: $IPA_NAME"
            ls -la artifacts/
            echo "üìè IPA size:"
            du -h artifacts/*.ipa

            # Show app contents for verification
            echo "üì± App contents:"
            ls -la Payload/Runner.app/
          else
            echo "‚ùå Runner.app not found at $APP_PATH"
            exit 1
          fi

      # 7Ô∏è‚É£ Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: merl-cinema-ios-unsigned
          path: artifacts/*.ipa
          retention-days: 30

      # 8Ô∏è‚É£ Upload build logs
      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-complete-logs
          path: |
            build/ios/**/*.log
            ios/**/*.log
            *.log
          retention-days: 7
