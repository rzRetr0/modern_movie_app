name: Build iOS App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Run tests
      run: flutter test
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Build iOS app (Debug)
      run: |
        cd ios
        flutter build ios --debug --no-codesign
        
    - name: Build iOS app (Release)
      run: |
        cd ios
        flutter build ios --release --no-codesign
        
    - name: Archive iOS app
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          archive
          
    - name: Export IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath ./build \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app
        path: ios/build/*.ipa
        retention-days: 30

  build-ipa-with-signing:
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Apple Certificate
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply certificate to keychain
        security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH

    - name: Install Provisioning Profile
      env:
        PROVISIONING_PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE_BASE64 }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
      run: |
        PROVISIONING_PROFILE_PATH=$RUNNER_TEMP/build_pp.provisionprofile
        echo -n "$PROVISIONING_PROFILE_BASE64" | base64 --decode --output $PROVISIONING_PROFILE_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PROVISIONING_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles

    - name: Build iOS app with signing
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
      run: |
        cd ios
        flutter build ios --release
        
    - name: Archive signed iOS app
      env:
        CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
        DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        PROVISIONING_PROFILE_SPECIFIER: ${{ secrets.PROVISIONING_PROFILE_SPECIFIER }}
      run: |
        cd ios
        xcodebuild -workspace Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath Runner.xcarchive \
          CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
          DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
          PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_SPECIFIER" \
          archive
          
    - name: Export signed IPA
      run: |
        cd ios
        xcodebuild -exportArchive \
          -archivePath Runner.xcarchive \
          -exportPath ./build \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload signed IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: ios-app-signed
        path: ios/build/*.ipa
        retention-days: 30
        
    - name: Upload to TestFlight (Optional)
      if: success()
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        # This step requires additional setup with App Store Connect API
        # Uncomment and configure if you want to automatically upload to TestFlight
        # xcrun altool --upload-app --type ios --file ios/build/*.ipa \
        #   --apiKey $APP_STORE_CONNECT_API_KEY_ID \
        #   --apiIssuer $APP_STORE_CONNECT_API_ISSUER_ID


