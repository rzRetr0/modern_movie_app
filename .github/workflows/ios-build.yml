name: Build Merl Cinema iOS App (Simulator - No Certificates)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'

      # 2.1Ô∏è‚É£ Verify Flutter setup
      - name: Flutter doctor
        run: flutter doctor -v

      # 3Ô∏è‚É£ Install Flutter dependencies
      - name: Flutter pub get
        run: flutter pub get

      # 4Ô∏è‚É£ Setup iOS build environment
      - name: Setup iOS Build Environment
        run: |
          echo "üîß Setting up iOS build environment..."

          # Install CocoaPods if not present
          if ! command -v pod &> /dev/null; then
            echo "üì¶ Installing CocoaPods..."
            sudo gem install cocoapods
          fi

          # Update CocoaPods repo (but don't setup - too slow)
          echo "üì¶ CocoaPods ready"

          # Precache iOS artifacts
          flutter precache --ios

          # Clean old builds
          flutter clean

          echo "‚úÖ iOS build environment ready"

      # 5Ô∏è‚É£ Clean old builds
      - name: Flutter clean
        run: flutter clean

      # 6Ô∏è‚É£ Build Flutter iOS App
      - name: Build Flutter iOS App
        run: |
          echo "üî® Building Flutter iOS app..."

          # Set up iOS build environment
          export LANG=en_US.UTF-8
          export LC_ALL=en_US.UTF-8

          # Try Flutter iOS build for simulator (no certificates needed)
          if flutter build ios --simulator --verbose; then
            echo "‚úÖ Flutter iOS simulator build successful!"
          else
            echo "‚ùå Flutter iOS build failed, trying alternative approach..."

            # Alternative: Generate Xcode project and build for simulator
            flutter build ios --config-only

            # Try to build with xcodebuild for simulator
            if [ -d "ios/Runner.xcodeproj" ]; then
              echo "üì¶ Found Xcode project, trying xcodebuild for simulator..."

              # Clean and build with xcodebuild for simulator
              cd ios
              xcodebuild clean -project Runner.xcodeproj -scheme Runner
              xcodebuild build -project Runner.xcodeproj -scheme Runner -configuration Release -destination "platform=iOS Simulator,name=iPhone 15,OS=latest" CODE_SIGNING_ALLOWED=NO

              # Check if build succeeded
              if [ -d "build/Release-iphonesimulator/Runner.app" ]; then
                echo "‚úÖ Xcode simulator build successful!"
                cp -r build/Release-iphonesimulator/Runner.app ../build/ios/iphonesimulator/
              else
                echo "‚ùå Xcode build also failed"
                exit 1
              fi
            else
              echo "‚ùå No Xcode project found"
              exit 1
            fi
          fi

      # 7Ô∏è‚É£ Create unsigned IPA
      - name: Package unsigned IPA
        run: |
          echo "üì¶ Creating unsigned IPA..."

          # Check multiple possible build paths (simulator)
          POSSIBLE_PATHS=(
            "build/ios/iphonesimulator/Runner.app"      # Standard Flutter simulator build
            "ios/build/Release-iphonesimulator/Runner.app"  # Xcode simulator build
            "build/ios/Release-iphonesimulator/Runner.app"  # Alternative simulator path
          )

          APP_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -d "$path" ]; then
              APP_PATH="$path"
              echo "‚úÖ Found Runner.app at: $path"
              break
            fi
          done

          if [ -n "$APP_PATH" ]; then
            echo "üì¶ Creating IPA from: $APP_PATH"

            # Create IPA structure
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/

            # Create IPA file
            zip -r merl-cinema-unsigned.ipa Payload/

            # Move to artifacts
            mkdir -p artifacts
            mv merl-cinema-unsigned.ipa artifacts/

            echo "‚úÖ IPA created successfully!"
            ls -la artifacts/
            echo "üìè IPA size:"
            du -h artifacts/*.ipa
          else
            echo "‚ùå Runner.app not found in any expected location"
            echo "üîç Searching for Runner.app in entire project..."
            find . -name "Runner.app" -type d 2>/dev/null || echo "No Runner.app found anywhere"

            echo "üìÅ Build directory contents:"
            find build -type d 2>/dev/null || echo "No build directory"

            echo "‚ùå Cannot create IPA - no iOS app bundle found"
            exit 1
          fi

      # 8Ô∏è‚É£ Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: merl-cinema-unsigned
          path: artifacts/*.ipa
          retention-days: 30

      # 9Ô∏è‚É£ Upload build logs (for debugging)
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            build/ios/**/*.log
            ios/**/*.log
          retention-days: 7
