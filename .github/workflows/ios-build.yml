name: Build Merl Cinema iOS App (No CocoaPods)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Flutter
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'

      # 2.1Ô∏è‚É£ Verify Flutter setup
      - name: Flutter doctor
        run: flutter doctor -v

      # 3Ô∏è‚É£ Install Flutter dependencies
      - name: Flutter pub get
        run: flutter pub get

      # 4Ô∏è‚É£ Precache iOS artifacts (Xcode simulator + device tools)
      - name: Flutter precache iOS
        run: flutter precache --ios

      # 5Ô∏è‚É£ Fix CocoaPods/xcodeproj compatibility
      - name: Fix CocoaPods Compatibility
        run: |
          echo "üîß Fixing CocoaPods/xcodeproj compatibility..."

          # Update RubyGems
          gem update --system

          # Update xcodeproj gem to latest version
          gem install xcodeproj

          # Update CocoaPods
          gem install cocoapods

          # Clean CocoaPods cache
          rm -rf ~/.cocoapods/repos/master

          # Re-setup CocoaPods repo
          pod setup

          echo "‚úÖ CocoaPods compatibility fixed"

      # 6Ô∏è‚É£ Clean old builds
      - name: Flutter clean
        run: flutter clean

      # 7Ô∏è‚É£ Build iOS app (force bypass CocoaPods)
      - name: Build Flutter iOS (force bypass)
        run: |
          echo "üî® Building Flutter iOS app (force bypass CocoaPods)..."

          # Force disable CocoaPods by removing Podfile completely
          if [ -f "ios/Podfile" ]; then
            rm ios/Podfile
            echo "üóëÔ∏è  Podfile removed to force CocoaPods bypass"
          fi

          # Build with Flutter (should skip CocoaPods entirely)
          flutter build ios --release --no-codesign --verbose

          # Restore Podfile for future use
          if [ -f "ios/Podfile.backup" ]; then
            cp ios/Podfile.backup ios/Podfile
            echo "üì¶ Podfile restored from backup"
          fi

      # 7Ô∏è‚É£ Create unsigned IPA (check multiple possible paths)
      - name: Package unsigned IPA
        run: |
          # Check multiple possible build paths
          POSSIBLE_PATHS=(
            "build/ios/iphoneos/Runner.app"
            "build/ios/Release-iphoneos/Runner.app"
            "ios/build/Release-iphoneos/Runner.app"
          )

          APP_PATH=""
          for path in "${POSSIBLE_PATHS[@]}"; do
            if [ -d "$path" ]; then
              APP_PATH="$path"
              echo "‚úÖ Found Runner.app at: $path"
              break
            fi
          done

          if [ -n "$APP_PATH" ]; then
            mkdir -p Payload
            cp -r "$APP_PATH" Payload/
            zip -r ios-app-unsigned.ipa Payload
            mkdir -p artifacts
            mv ios-app-unsigned.ipa artifacts/
            echo "‚úÖ IPA created successfully from $APP_PATH"
            ls -la artifacts/
          else
            echo "‚ùå Runner.app not found in any expected location"
            echo "üîç Searching for Runner.app in entire build directory..."
            find . -name "Runner.app" -type d 2>/dev/null || echo "No Runner.app found"
            echo "üìÅ Build directory contents:"
            find build -type f -name "*.app" 2>/dev/null || echo "No .app files found"
            exit 1
          fi

      # 8Ô∏è‚É£ Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-unsigned
          path: artifacts/*.ipa
          retention-days: 30

      # 9Ô∏è‚É£ Upload build logs (for debugging)
      - name: Upload build logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            build/ios/**/*.log
            ios/**/*.log
          retention-days: 7
